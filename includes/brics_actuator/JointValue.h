/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-fuerte-cob-common-0.4.5/debian/ros-fuerte-cob-common/opt/ros/fuerte/stacks/cob_common/brics_actuator/msg/JointValue.msg */
#ifndef BRICS_ACTUATOR_MESSAGE_JOINTVALUE_H
#define BRICS_ACTUATOR_MESSAGE_JOINTVALUE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace brics_actuator
{
template <class ContainerAllocator>
struct JointValue_ {
  typedef JointValue_<ContainerAllocator> Type;

  JointValue_()
  : timeStamp()
  , joint_uri()
  , unit()
  , value(0.0)
  {
  }

  JointValue_(const ContainerAllocator& _alloc)
  : timeStamp()
  , joint_uri(_alloc)
  , unit(_alloc)
  , value(0.0)
  {
  }

  typedef ros::Time _timeStamp_type;
  ros::Time timeStamp;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_uri_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  joint_uri;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _unit_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  unit;

  typedef double _value_type;
  double value;


  typedef boost::shared_ptr< ::brics_actuator::JointValue_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brics_actuator::JointValue_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointValue
typedef  ::brics_actuator::JointValue_<std::allocator<void> > JointValue;

typedef boost::shared_ptr< ::brics_actuator::JointValue> JointValuePtr;
typedef boost::shared_ptr< ::brics_actuator::JointValue const> JointValueConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::brics_actuator::JointValue_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::brics_actuator::JointValue_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace brics_actuator

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::brics_actuator::JointValue_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::brics_actuator::JointValue_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::brics_actuator::JointValue_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c8dad5a006889ad7de711a684999f0c6";
  }

  static const char* value(const  ::brics_actuator::JointValue_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc8dad5a006889ad7ULL;
  static const uint64_t static_value2 = 0xde711a684999f0c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::brics_actuator::JointValue_<ContainerAllocator> > {
  static const char* value() 
  {
    return "brics_actuator/JointValue";
  }

  static const char* value(const  ::brics_actuator::JointValue_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::brics_actuator::JointValue_<ContainerAllocator> > {
  static const char* value() 
  {
    return "time timeStamp 		#time of the data \n\
string joint_uri\n\
string unit 		#if empy expects si units, you can use boost::unit\n\
float64 value\n\
\n\
";
  }

  static const char* value(const  ::brics_actuator::JointValue_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::brics_actuator::JointValue_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timeStamp);
    stream.next(m.joint_uri);
    stream.next(m.unit);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointValue_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brics_actuator::JointValue_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::brics_actuator::JointValue_<ContainerAllocator> & v) 
  {
    s << indent << "timeStamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "joint_uri: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_uri);
    s << indent << "unit: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unit);
    s << indent << "value: ";
    Printer<double>::stream(s, indent + "  ", v.value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BRICS_ACTUATOR_MESSAGE_JOINTVALUE_H


/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-fuerte-cob-common-0.4.5/debian/ros-fuerte-cob-common/opt/ros/fuerte/stacks/cob_common/brics_actuator/msg/Poison.msg */
#ifndef BRICS_ACTUATOR_MESSAGE_POISON_H
#define BRICS_ACTUATOR_MESSAGE_POISON_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace brics_actuator
{
template <class ContainerAllocator>
struct Poison_ {
  typedef Poison_<ContainerAllocator> Type;

  Poison_()
  : originator()
  , description()
  , qos(0.0)
  {
  }

  Poison_(const ContainerAllocator& _alloc)
  : originator(_alloc)
  , description(_alloc)
  , qos(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _originator_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  originator;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  description;

  typedef float _qos_type;
  float qos;


  typedef boost::shared_ptr< ::brics_actuator::Poison_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brics_actuator::Poison_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Poison
typedef  ::brics_actuator::Poison_<std::allocator<void> > Poison;

typedef boost::shared_ptr< ::brics_actuator::Poison> PoisonPtr;
typedef boost::shared_ptr< ::brics_actuator::Poison const> PoisonConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::brics_actuator::Poison_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::brics_actuator::Poison_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace brics_actuator

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::brics_actuator::Poison_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::brics_actuator::Poison_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::brics_actuator::Poison_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b16420a6fd4cc18f64b776ee10e98bb0";
  }

  static const char* value(const  ::brics_actuator::Poison_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb16420a6fd4cc18fULL;
  static const uint64_t static_value2 = 0x64b776ee10e98bb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::brics_actuator::Poison_<ContainerAllocator> > {
  static const char* value() 
  {
    return "brics_actuator/Poison";
  }

  static const char* value(const  ::brics_actuator::Poison_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::brics_actuator::Poison_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string originator 		# node id\n\
string description 		# encoding still an issue\n\
float32 qos			# reliability of the channel\n\
				# 0..1 where 1 means healthy\n\
\n\
";
  }

  static const char* value(const  ::brics_actuator::Poison_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::brics_actuator::Poison_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.originator);
    stream.next(m.description);
    stream.next(m.qos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Poison_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brics_actuator::Poison_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::brics_actuator::Poison_<ContainerAllocator> & v) 
  {
    s << indent << "originator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.originator);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "qos: ";
    Printer<float>::stream(s, indent + "  ", v.qos);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BRICS_ACTUATOR_MESSAGE_POISON_H

